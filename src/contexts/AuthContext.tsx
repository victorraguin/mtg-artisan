import React, {
  createContext,
  useContext,
  useEffect,
  useState,
  useRef,
  useCallback,
} from "react";
import { User } from "@supabase/supabase-js";
import type { Database } from "../lib/database.types";
import supabase from "../lib/supabase";

type Profile = Database["public"]["Tables"]["profiles"]["Row"];

interface AuthContextType {
  user: User | null;
  profile: Profile | null;
  loading: boolean;
  authStable: boolean; // √âtat de stabilit√© de l'authentification
  signIn: (email: string, password: string) => Promise<{ error?: any }>;
  signUp: (
    email: string,
    password: string,
    displayName?: string
  ) => Promise<{ error?: any }>;
  signOut: () => Promise<void>;
  updateProfile: (updates: Partial<Profile>) => Promise<{ error?: any }>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);
  const [authStable, setAuthStable] = useState(false); // √âtat de stabilit√©

  // R√©f√©rence pour √©viter les fuites de m√©moire
  const isMountedRef = useRef(true);
  const profileFetchingRef = useRef<Set<string>>(new Set());
  const lastFetchTimeRef = useRef<number>(0);
  const fetchTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Fonction fetchProfile m√©moris√©e avec useCallback
  const fetchProfile = useCallback(async (userId: string) => {
    console.log("üéØ fetchProfile appel√© avec userId:", userId);

    // √âviter les appels multiples simultan√©s
    if (profileFetchingRef.current.has(userId)) {
      console.log("üîÑ Profil d√©j√† en cours de r√©cup√©ration pour:", userId);
      return;
    }

    profileFetchingRef.current.add(userId);
    console.log(
      "üìù Ajout de",
      userId,
      "√† la liste des profils en cours de r√©cup√©ration"
    );

    try {
      console.log("üë§ R√©cup√©ration du profil pour:", userId);
      console.log("üîç Ex√©cution de la requ√™te Supabase...");

      const { data, error } = await supabase
        .from("profiles")
        .select("*")
        .eq("id", userId)
        .maybeSingle();

      console.log("üìä R√©ponse Supabase - data:", data);
      console.log("üìä R√©ponse Supabase - error:", error);
      console.log(
        "üîç V√©rification isMountedRef.current:",
        isMountedRef.current
      );

      // On continue m√™me si le composant se remonte, car on veut r√©cup√©rer le profil
      console.log("‚úÖ Composant mont√©, continuation de fetchProfile");

      if (error) {
        console.warn("‚ö†Ô∏è Profil non trouv√©:", error.message);
        // Cr√©er un profil par d√©faut si il n'existe pas
        if (error.code === "PGRST116") {
          console.log("üìù Cr√©ation d'un profil par d√©faut...");
          const { data: newProfile, error: createError } = await supabase
            .from("profiles")
            .insert({
              id: userId,
              display_name: "",
              role: "buyer",
            })
            .select()
            .single();

          if (!createError && newProfile && isMountedRef.current) {
            setProfile(newProfile);
            return;
          }
        }
        setProfile(null);
        return;
      }

      console.log("‚úÖ Pas d'erreur, traitement du profil r√©cup√©r√©");

      console.log("‚úÖ Profil r√©cup√©r√©:", {
        displayName: data?.display_name,
        role: data?.role,
      });
      console.log("r√©ussi");
      console.log("üîÑ Mise √† jour de l'√©tat profile avec:", data);
      setProfile(data);
    } catch (error) {
      console.warn("‚ö†Ô∏è Erreur profil:", error);
      if (isMountedRef.current) {
        setProfile(null);
      }
    } finally {
      profileFetchingRef.current.delete(userId);
    }
  }, []);

  // Fonction de debounce pour √©viter les appels trop fr√©quents
  const debouncedFetchProfile = useCallback(
    (userId: string, delay: number = 1000) => {
      const now = Date.now();

      // Si on a d√©j√† fait un appel r√©cemment, annuler le pr√©c√©dent
      if (fetchTimeoutRef.current) {
        clearTimeout(fetchTimeoutRef.current);
      }

      // Si on a fait un appel il y a moins de 1 seconde, attendre
      if (now - lastFetchTimeRef.current < delay) {
        fetchTimeoutRef.current = setTimeout(() => {
          if (isMountedRef.current) {
            fetchProfile(userId);
          }
        }, delay - (now - lastFetchTimeRef.current));
        return;
      }

      // Sinon, faire l'appel imm√©diatement
      lastFetchTimeRef.current = now;
      fetchProfile(userId);
    },
    [fetchProfile]
  );

  useEffect(() => {
    const initializeAuth = async () => {
      try {
        console.log("üîç Initialisation de l'authentification...");

        // R√©cup√©rer la session persist√©e
        const {
          data: { session },
          error,
        } = await supabase.auth.getSession();

        if (!isMountedRef.current) return;

        if (error) {
          console.error(
            "‚ùå Erreur lors de la r√©cup√©ration de la session:",
            error
          );
          setLoading(false);
          setAuthStable(true);
          return;
        }

        console.log("üìã Session r√©cup√©r√©e:", {
          hasSession: !!session,
          userId: session?.user?.id,
          expiresAt: session?.expires_at,
        });

        // Si on a une session valide, mettre √† jour l'√©tat
        if (session?.user) {
          setUser(session.user);
          await fetchProfile(session.user.id);
        } else {
          setUser(null);
          setProfile(null);
        }

        setAuthStable(true);
      } catch (error) {
        console.error("‚ùå Erreur d'initialisation auth:", error);
        if (isMountedRef.current) {
          setAuthStable(true);
        }
      } finally {
        if (isMountedRef.current) {
          setLoading(false);
        }
      }
    };

    initializeAuth();

    // √âcouter les changements d'√©tat d'authentification
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange(async (event, session) => {
      if (!isMountedRef.current) return;

      console.log("üîÑ Changement d'√©tat auth:", {
        event,
        hasSession: !!session,
        userId: session?.user?.id,
        userEmail: session?.user?.email,
      });

      if (event === "SIGNED_IN") {
        console.log("üîê √âv√©nement SIGNED_IN d√©tect√©");
        setUser(session?.user ?? null);
        if (session?.user) {
          console.log("üë§ R√©cup√©ration du profil apr√®s SIGNED_IN");
          // Utiliser fetchProfile directement au lieu du debounce pour l'√©v√©nement SIGNED_IN
          await fetchProfile(session.user.id);
        }
      } else if (event === "SIGNED_OUT") {
        console.log("üö™ √âv√©nement SIGNED_OUT d√©tect√©");
        setUser(null);
        setProfile(null);
      } else if (event === "TOKEN_REFRESHED" && session?.user) {
        console.log("üîÑ √âv√©nement TOKEN_REFRESHED d√©tect√©");
        // Rafra√Æchir le profil seulement si n√©cessaire et si on a d√©j√† un profil
        const currentProfile = profile;
        if (!currentProfile || currentProfile.id !== session.user.id) {
          debouncedFetchProfile(session.user.id);
        }
      }
    });

    return () => {
      subscription.unsubscribe();
      if (fetchTimeoutRef.current) {
        clearTimeout(fetchTimeoutRef.current);
      }
    };
  }, [fetchProfile, debouncedFetchProfile]);

  // Cleanup lors du d√©montage
  useEffect(() => {
    return () => {
      isMountedRef.current = false;
      if (fetchTimeoutRef.current) {
        clearTimeout(fetchTimeoutRef.current);
      }
    };
  }, []);

  const signIn = async (email: string, password: string) => {
    try {
      console.log("üîê Tentative de connexion pour:", email);

      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        console.error("‚ùå Erreur de connexion:", error);
      } else {
        console.log("‚úÖ Connexion r√©ussie");
        console.log("üìã Donn√©es de session:", {
          user: data.user,
          session: data.session,
        });

        // Forcer la mise √† jour imm√©diate de l'√©tat
        if (data.user) {
          console.log("üîÑ Mise √† jour forc√©e de l'√©tat utilisateur");
          console.log("üéØ Appel direct de fetchProfile pour:", data.user.id);
          try {
            await fetchProfile(data.user.id);
            console.log("‚úÖ fetchProfile termin√© avec succ√®s");
            // Mettre √† jour l'√©tat utilisateur APR√àS avoir r√©cup√©r√© le profil
            setUser(data.user);
            // L'authentification est maintenant stable
            setLoading(false);
            setAuthStable(true);
          } catch (error) {
            console.error("‚ùå Erreur lors de fetchProfile:", error);
            // M√™me en cas d'erreur, on met √† jour l'utilisateur
            setUser(data.user);
            setLoading(false);
            setAuthStable(true);
          }
        }
      }

      return { error };
    } catch (error) {
      console.error("‚ùå Erreur inattendue lors de la connexion:", error);
      return { error };
    }
  };

  const signUp = async (
    email: string,
    password: string,
    displayName?: string,
    referralCode?: string
  ) => {
    try {
      console.log("üìù Tentative d'inscription pour:", email);

      const { data, error } = await supabase.auth.signUp({
        email,
        password,
      });

      if (!error && data.user) {
        console.log("‚úÖ Inscription r√©ussie, cr√©ation du profil...");

        const { error: profileError } = await supabase.from("profiles").insert({
          id: data.user.id,
          display_name: displayName || "",
          role: "buyer",
        });

        if (profileError) {
          console.error("‚ùå Erreur cr√©ation profil:", profileError);
        } else {
          console.log("‚úÖ Profil cr√©√©");

          // Traitement du code de parrainage si fourni
          if (referralCode) {
            try {
              console.log("üîó Traitement du code de parrainage:", referralCode);
              
              // V√©rifier si l'ambassadeur existe et est actif
              const { data: ambassador, error: ambassadorError } = await supabase
                .from('ambassadors')
                .select('id, user_id, commission_rate')
                .eq('referral_code', referralCode)
                .eq('is_active', true)
                .single();

              if (!ambassadorError && ambassador) {
                // Cr√©er l'enregistrement de parrainage
                const { error: referralError } = await supabase
                  .from('referrals')
                  .insert({
                    ambassador_id: ambassador.id,
                    referred_user_id: data.user.id,
                    referral_date: new Date().toISOString(),
                    is_active: true,
                    total_earned: 0
                  });

                if (referralError) {
                  console.error("‚ùå Erreur cr√©ation parrainage:", referralError);
                } else {
                  console.log("‚úÖ Parrainage cr√©√© avec succ√®s");
                }
              } else {
                console.error("‚ùå Code de parrainage invalide:", ambassadorError);
              }
            } catch (referralProcessError) {
              console.error("‚ùå Erreur traitement parrainage:", referralProcessError);
              // On ne fait pas √©chouer l'inscription pour autant
            }
          }
        }
      }

      return { error };
    } catch (error) {
      console.error("‚ùå Erreur inattendue lors de l'inscription:", error);
      return { error };
    }
  };

  const signOut = async () => {
    try {
      console.log("üö™ D√©connexion...");

      const { error } = await supabase.auth.signOut();

      if (error) {
        console.error("‚ùå Erreur de d√©connexion:", error);
      } else {
        console.log("‚úÖ D√©connexion r√©ussie");
        setUser(null);
        setProfile(null);
      }
    } catch (error) {
      console.error("‚ùå Erreur inattendue lors de la d√©connexion:", error);
    }
  };

  const updateProfile = async (updates: Partial<Profile>) => {
    if (!user) return { error: "Not authenticated" };

    try {
      console.log("üìù Mise √† jour du profil...");

      const { error } = await supabase
        .from("profiles")
        .update(updates)
        .eq("id", user.id);

      if (!error) {
        console.log("‚úÖ Profil mis √† jour");
        setProfile((prev) => (prev ? { ...prev, ...updates } : null));
      } else {
        console.error("‚ùå Erreur mise √† jour profil:", error);
      }

      return { error };
    } catch (error) {
      console.error("‚ùå Erreur inattendue mise √† jour profil:", error);
      return { error };
    }
  };

  const refreshProfile = async () => {
    if (!user) return;
    
    try {
      console.log("üîÑ Rafra√Æchissement du profil...");
      await fetchProfile(user.id);
    } catch (error) {
      console.error("‚ùå Erreur rafra√Æchissement profil:", error);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        profile,
        loading,
        authStable,
        signIn,
        signUp,
        signOut,
        updateProfile,
        refreshProfile,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}
